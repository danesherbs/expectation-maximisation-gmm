pkg load statistics% Define tolerancetol = 1e-1;% Define number of data points and dimensionsm = 1000;  % number of data pointsd = 2;  % dimensions% Sample points from GMMphi = [0.25, 0.25, 0.5];k = length(phi);[xs, ys, ~] = sample_gmm(phi, m);X = [xs', ys'];  % (m x d) matrix% Initialise parameters (to be estimated with EM)phi = ones(k, 1) / k;mu = zeros(k, d);sigma = zeros(d, d, k);for j = 1:k  mu(j, :) = mean(X, [1]) + rand(1, d);  % sample mean + std. normal noise  L = tril(rand(d, d));  % random lower triangular matrix  sigma(:, :, j) = L * L';  % make positive definite matrix via Cholesky decomp.endfor% Perform EM to estimate phi, mu and sigmadiff = inf;while diff >= tol  % Print difference  sigma(:, :, 1)    % E-step (guess labels of data points)  w = zeros(m, k);  for i = 1:m    % Calculate probability of being in each cluster for current data point    for j = 1:k      w(i, j) = mvnpdf(X(i, :), mu(j, :), sigma(:, :, j));    endfor    w(i, :) /= sum(w(i, :));  % normalise for probability distribution  endfor  % Store current parameters  old_phi = phi;  old_mu = mu;  old_sigma = sigma;  % M-step (update values of parameters)  for j = 1:k    % Update mixing coefficient of cluster    phi(j) = 1/m * sum(w(:, j));    % Update mean and covariance of cluster    mu(j, :) = w(:, j)' * X(:, :) / sum(w(:, j));    for i = 1:m      sigma(:, :, j) += w(i, j) * (X(i, :) - mu(j, :)) * (X(i, :) - mu(j, :))' / sum(w(:, j));    endfor  endfor  % Compute difference  diff_phi = sum(abs(phi - old_phi)(:));  diff_mu = sum(abs(mu - old_mu)(:));  diff_sigma = sum(abs(sigma - old_sigma)(:));  diff = max([diff_phi, diff_mu, diff_sigma]);endwhile